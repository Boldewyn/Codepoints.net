<?php


/**
 * get abbreviations and stuff
 */
class UnicodeInfo {
    protected $categories = array(
        'age' => 'Age',
        'na' => 'Unicode Name',
        'na1' => 'Unicode 1 Name',
        'gc' => 'General Category',
        'ccc' => 'Combining Class',
        'bc' => 'Bidirectional Category',
        'Bidi_M' => 'Bidi Mirrored',
        'bmg' => 'Bidi Mirrored Glyph',
        'Bidi_C' => 'Bidi Control',
        'dt' => 'Decomposition Type',
        'dm' => 'Decomposition Mapping',
        'CE' => 'Composition Exclusion',
        'Comp_Ex' => 'Full Composition Exclusion',
        'NFC_QC' => 'NFC Quick Check',
        'NFD_QC' => 'NFD Quick Check',
        'NFKC_QC' => 'NFKC Quick Check',
        'NFKD_QC' => 'NFKD Quick Check',
        'XO_NFC' => 'Expands On NFC',
        'XO_NFD' => 'Expands On NFD',
        'XO_NFKC' => 'Expands On NFKC',
        'XO_NFKD' => 'Expands On NFKD',
        'FC_NFKC' => 'FC NFKC Closure',
        'nt' => 'Numeric Type',
        'nv' => 'Numeric Value',
        'jt' => 'Joining Class',
        'jg' => 'Joining Group',
        'Join_C' => 'Join Control',
        'lb' => 'Line Break',
        'ea' => 'East Asian Width',
        'Upper' => 'Uppercase',
        'Lower' => 'Lowercase',
        'OUpper' => 'Other Uppercase',
        'OLower' => 'Other Lowercase',
        'suc' => 'Simple Uppercase Mapping',
        'slc' => 'Simple Lowercase Mapping',
        'stc' => 'Simple Titlecase Mapping',
        'uc' => 'Uppercase Mapping',
        'lc' => 'Lowercase Mapping',
        'tc' => 'Titlecase Mapping',
        'scf' => 'Simple Case Folding',
        'cf' => 'Case Folding',
        'CI' => 'Case Ignorable',
        'Cased' => 'Cased',
        'CWCF' => 'Changes When Casefolded',
        'CWCM' => 'Changes When Casemapped',
        'CWL' => 'Changes When Lowercased',
        'CWKCF' => 'Changes When NFKC Casefolded',
        'CWT' => 'Changes When Titlecased',
        'CWU' => 'Changes When Uppercased',
        'NFKC_CF' => 'NKFC Casefold',
        'sc' => 'Script',
        'isc' => 'ISO 10646 Comment',
        'hst' => 'Hangul Syllable Type',
        'JSN' => 'Jamo Short Name',
        'InSC' => 'Indic Syllabic Category',
        'InMC' => 'Indic Matra Category',
        'IDS' => 'ID Start',
        'OIDS' => 'Other ID Start',
        'XIDS' => 'XID Start',
        'IDC' => 'ID Continue',
        'OIDC' => 'Other ID Continue',
        'XIDC' => 'XID Continue',
        'Pat_Syn' => 'Pattern Syntax',
        'Pat_WS' => 'Pattern White Space',
        'Dash' => 'Dash',
        'Hyphen' => 'Hyphen',
        'QMark' => 'Quotation Mark',
        'Term' => 'Terminal Punctuation',
        'STerm' => 'STerm',
        'Dia' => 'Diacritic',
        'Ext' => 'Extender',
        'SD' => 'Soft Dotted',
        'Alpha' => 'Alphabetic',
        'OAlpha' => 'Other Alphabetic',
        'Math' => 'Math',
        'OMath' => 'Other Math',
        'Hex' => 'Hex Digit',
        'AHex' => 'ASCII Hex Digit',
        'DI' => 'Default Ignorable Code Point',
        'ODI' => 'Other Default Ignorable Code Point',
        'LOE' => 'Logical Order Exception',
        'WSpace' => 'White Space',
        'Gr_Base' => 'Grapheme Base',
        'Gr_Ext' => 'Grapheme Extend',
        'OGr_Ext' => 'Other Grapheme Extend',
        'Gr_Link' => 'Grapheme Link',
        'GCB' => 'Grapheme Cluster Break',
        'WB' => 'Word Break',
        'SB' => 'Sentence Break',
        'Ideo' => 'Ideographic',
        'UIdeo' => 'Unified Ideograph',
        'IDSB' => 'IDS Binary Operator',
        'IDST' => 'IDS Trinary Operator and ',
        'Radical' => 'Radical',
        'Dep' => 'Deprecated',
        'VS' => 'Variation Selector',
        'NChar' => 'Noncharacter Code Point',
        'kAccountingNumeric' => '',
        'kAlternateHanYu' => '',
        'kAlternateJEF' => '',
        'kAlternateKangXi' => '',
        'kAlternateMorohashi' => '',
        'kBigFive' => '',
        'kCCCII' => '',
        'kCNS1986' => '',
        'kCNS1992' => '',
        'kCangjie' => '',
        'kCantonese' => '',
        'kCheungBauer' => '',
        'kCheungBauerIndex' => '',
        'kCihaiT' => '',
        'kCompatibilityVariant' => '',
        'kCowles' => '',
        'kDaeJaweon' => '',
        'kDefinition' => '',
        'kEACC' => '',
        'kFenn' => '',
        'kFennIndex' => '',
        'kFourCornerCode' => '',
        'kFrequency' => '',
        'kGB0' => '',
        'kGB1' => '',
        'kGB3' => '',
        'kGB5' => '',
        'kGB7' => '',
        'kGB8' => '',
        'kGradeLevel' => '',
        'kGSR' => '',
        'kHangul' => '',
        'kHanYu' => '',
        'kHanyuPinlu' => '',
        'kHanyuPinyin' => '',
        'kHDZRadBreak' => '',
        'kHKGlyph' => '',
        'kHKSCS' => '',
        'kIBMJapan' => '',
        'kIICore' => '',
        'kIRGDaeJaweon' => '',
        'kIRGDaiKanwaZiten' => '',
        'kIRGHanyuDaZidian' => '',
        'kIRGKangXi' => '',
        'kIRG_GSource' => '',
        'kIRG_HSource' => '',
        'kIRG_JSource' => '',
        'kIRG_KPSource' => '',
        'kIRG_KSource' => '',
        'kIRG_MSource' => '',
        'kIRG_TSource' => '',
        'kIRG_USource' => '',
        'kIRG_VSource' => '',
        'kJHJ' => '',
        'kJIS0213' => '',
        'kJapaneseKun' => '',
        'kJapaneseOn' => '',
        'kJis0' => '',
        'kJis1' => '',
        'kKPS0' => '',
        'kKPS1' => '',
        'kKSC0' => '',
        'kKSC1' => '',
        'kKangXi' => '',
        'kKarlgren' => '',
        'kKorean' => '',
        'kLau' => '',
        'kMainlandTelegraph' => '',
        'kMandarin' => '',
        'kMatthews' => '',
        'kMeyerWempe' => '',
        'kMorohashi' => '',
        'kNelson' => '',
        'kOtherNumeric' => '',
        'kPhonetic' => '',
        'kPrimaryNumeric' => '',
        'kPseudoGB1' => '',
        'kRSAdobe_Japan1_6' => '',
        'kRSJapanese' => '',
        'kRSKanWa' => '',
        'kRSKangXi' => '',
        'kRSKorean' => '',
        'kRSMerged' => '',
        'kRSUnicode' => '',
        'kSBGY' => '',
        'kSemanticVariant' => '',
        'kSimplifiedVariant' => '',
        'kSpecializedSemanticVariant' => '',
        'kTaiwanTelegraph' => '',
        'kTang' => '',
        'kTotalStrokes' => '',
        'kTraditionalVariant' => '',
        'kVietnamese' => '',
        'kXHC1983' => '',
        'kWubi' => '',
        'kXerox' => '',
        'kZVariant' => 'z Variant',
        'blk' => 'Block',
        'scx' => 'Script Extension',
    );

    protected $boolean = array( 'Bidi_M', 'Bidi_C', 'CE', 'Comp_Ex', 'XO_NFC',
    'XO_NFD', 'XO_NFKC', 'XO_NFKD', 'Join_C', 'Upper', 'Lower', 'OUpper',
    'OLower', 'CI', 'Cased', 'CWCF', 'CWCM', 'CWL', 'CWKCF', 'CWT', 'CWU',
    'IDS', 'OIDS', 'XIDS', 'IDC', 'OIDC', 'XIDC', 'Pat_Syn', 'Pat_WS', 'Dash',
    'Hyphen', 'QMark', 'Term', 'STerm', 'Dia', 'Ext', 'SD', 'Alpha', 'OAlpha',
    'Math', 'OMath', 'Hex', 'AHex', 'DI', 'ODI', 'LOE', 'WSpace', 'Gr_Base',
    'Gr_Ext', 'OGr_Ext', 'Gr_Link', 'Ideo', 'UIdeo', 'IDSB', 'IDST',
    'Radical', 'Dep', 'VS', 'NChar');

    protected $legend = array(

        'gc' => array(
            'Lu' => 'Uppercase Letter',
            'Ll' => 'Lowercase Letter',
            'Lt' => 'Titlecase Letter',
            'Lm' => 'Modifier Letter',
            'Lo' => 'Other Letter',
            'Mn' => 'Nonspacing Mark',
            'Mc' => 'Spacing Mark',
            'Me' => 'Enclosing Mark',
            'Nd' => 'Decimal Number',
            'Nl' => 'Letter Number',
            'No' => 'Other Number',
            'Pc' => 'Connector Punctuation',
            'Pd' => 'Dash Punctuation',
            'Ps' => 'Open Punctuation',
            'Pe' => 'Close Punctuation',
            'Pi' => 'Initial Punctuation',
            'Pf' => 'Final Punctuation',
            'Po' => 'Other Punctuation',
            'Sm' => 'Math Symbol',
            'Sc' => 'Currency Symbol',
            'Sk' => 'Modifier Symbol',
            'So' => 'Other Symbol',
            'Zs' => 'Space Separator',
            'Zl' => 'Line Separator',
            'Zp' => 'Paragraph Separator',
            'Cc' => 'Control',
            'Cf' => 'Format',
            'Cs' => 'Surrogate',
            'Co' => 'Private Use',
            'Cn' => 'Unassigned',
        ),

        'bc' => array(
            'L' =>   'Left To Right',
            'LRE' => 'Left To Right Embedding',
            'LRO' => 'Left To Right Override',
            'R' =>   'Right To Left',
            'AL' =>  'Arabic Letter',
            'RLE' => 'Right To Left Embedding',
            'RLO' => 'Right To Left Override',
            'PDF' => 'Pop Directional Format',
            'EN' =>  'European Number',
            'ES' =>  'European Separator',
            'ET' =>  'European Terminator',
            'AN' =>  'Arabic Number',
            'CS' =>  'Common Separator',
            'NSM' => 'Nonspacing Mark',
            'BN' =>  'Boundary Neutral',
            'B' =>   'Paragraph Separator',
            'S' =>   'Segment Separator',
            'WS' =>  'White Space',
            'ON' =>  'Other Neutral',
        ),

        'ccc' => array(
            '0' =>   array('Not Reordered',        'Spacing and enclosing marks; also many vowel and consonant signs, even if nonspacing'),
            '1' =>   array('Overlay',              'Marks which overlay a base letter or symbol'),
            '7' =>   array('Nukta',                'Diacritic nukta marks in Brahmi-derived scripts'),
            '8' =>   array('Kana Voicing',         'Hiragana/Katakana voicing marks'),
            '9' =>   array('Virama',               'Viramas'),
            '10' =>  array('',                     'Start of fixed position classes'),
            '199' => array('',                     'End of fixed position classes'),
            '200' => array('Attached Below Left',  'Marks attached at the bottom left'),
            '202' => array('Attached Below',       'Marks attached directly below'),
            '204' => array('',                     'Marks attached at the top right'),
            '208' => array('',                     'Marks attached to the left'),
            '210' => array('',                     'Marks attached to the right'),
            '212' => array('',                     'Marks attached at the top left'),
            '214' => array('Attached Above',       'Marks attached directly above'),
            '216' => array('Attached Above Right', 'Marks attached at the top right'),
            '218' => array('Below Left',           'Distinct marks at the bottom left'),
            '220' => array('Below',                'Distinct marks directly below'),
            '222' => array('Below Right',          'Distinct marks at the bottom right'),
            '224' => array('Left',                 'Distinct marks to the left'),
            '226' => array('Right',                'Distinct marks to the right'),
            '228' => array('Above Left',           'Distinct marks at the top left'),
            '230' => array('Above',                'Distinct marks directly above'),
            '232' => array('Above Right',          'Distinct marks at the top right'),
            '233' => array('Double Below',         'Distinct marks subtending two bases'),
            '234' => array('Double Above',         'Distinct marks extending above two bases'),
            '240' => array('Iota Subscript',       'Greek iota subscript only'),
        ),

        'dt' => array(
            'can' => 'Canonical',
            'com' => 'Compat',
            'enc' => 'Circle',
            'fin' => 'Final',
            'font' => 'Font',
            'fra' => 'Fraction',
            'init' => 'Initial',
            'iso' => 'Isolated',
            'med' => 'Medial',
            'nar' => 'Narrow',
            'nb' => 'Nobreak',
            'none' => 'None',
            'sml' => 'Small',
            'sqr' => 'Square',
            'sub' => 'Sub',
            'sup' => 'Super',
            'vert' => 'Vertical',
            'wide' => 'Wide',
        ),

        'nt' => array(
            'De' => 'Decimal',
            'Di' => 'Digit',
            'None' => 'None',
            'Nu' => 'Numeric',
        ),

        'lb' => array(
            'AI' => 'Ambiguous',
            'AL' => 'Alphabetic',
            'B2' => 'Break Both',
            'BA' => 'Break After',
            'BB' => 'Break Before',
            'BK' => 'Mandatory Break',
            'CB' => 'Contingent Break',
            'CJ' => 'Conditional Japanese Starter',
            'CL' => 'Close Punctuation',
            'CM' => 'Combining Mark',
            'CP' => 'Close Parenthesis',
            'CR' => 'Carriage Return',
            'EX' => 'Exclamation',
            'GL' => 'Glue',
            'H2' => 'H2',
            'H3' => 'H3',
            'HL' => 'Hebrew Letter',
            'HY' => 'Hyphen',
            'ID' => 'Ideographic',
            'IN' => 'Inseparable',
            'IS' => 'Infix Numeric',
            'JL' => 'JL',
            'JT' => 'JT',
            'JV' => 'JV',
            'LF' => 'Line Feed',
            'NL' => 'Next Line',
            'NS' => 'Nonstarter',
            'NU' => 'Numeric',
            'OP' => 'Open Punctuation',
            'PO' => 'Postfix Numeric',
            'PR' => 'Prefix Numeric',
            'QU' => 'Quotation',
            'SA' => 'Complex Context',
            'SG' => 'Surrogate',
            'SP' => 'Space',
            'SY' => 'Break Symbols',
            'WJ' => 'Word Joiner',
            'XX' => 'Unknown',
            'ZW' => 'ZWSpace',
        ),

        'ea' => array(
            'A' => 'Ambiguous',
            'F' => 'Fullwidth',
            'H' => 'Halfwidth',
            'N' => 'Neutral',
            'Na'=> 'Narrow',
            'W' => 'Wide',
        ),

        'sc' => array(
            'Arab' => 'Arabic',
            'Armi' => 'Imperial Aramaic',
            'Armn' => 'Armenian',
            'Avst' => 'Avestan',
            'Bali' => 'Balinese',
            'Bamu' => 'Bamum',
            'Batk' => 'Batak',
            'Beng' => 'Bengali',
            'Bopo' => 'Bopomofo',
            'Brah' => 'Brahmi',
            'Brai' => 'Braille',
            'Bugi' => 'Buginese',
            'Buhd' => 'Buhid',
            'Cakm' => 'Chakma',
            'Cans' => 'Canadian Aboriginal',
            'Cari' => 'Carian',
            'Cham' => 'Cham',
            'Cher' => 'Cherokee',
            'Copt' => 'Coptic',
            'Cprt' => 'Cypriot',
            'Cyrl' => 'Cyrillic',
            'Deva' => 'Devanagari',
            'Dsrt' => 'Deseret',
            'Egyp' => 'Egyptian Hieroglyphs',
            'Ethi' => 'Ethiopic',
            'Geor' => 'Georgian',
            'Glag' => 'Glagolitic',
            'Goth' => 'Gothic',
            'Grek' => 'Greek',
            'Gujr' => 'Gujarati',
            'Guru' => 'Gurmukhi',
            'Hang' => 'Hangul',
            'Hani' => 'Han',
            'Hano' => 'Hanunoo',
            'Hebr' => 'Hebrew',
            'Hira' => 'Hiragana',
            'Hrkt' => 'Katakana Or Hiragana',
            'Ital' => 'Old Italic',
            'Java' => 'Javanese',
            'Kali' => 'Kayah Li',
            'Kana' => 'Katakana',
            'Khar' => 'Kharoshthi',
            'Khmr' => 'Khmer',
            'Knda' => 'Kannada',
            'Kthi' => 'Kaithi',
            'Lana' => 'Tai Tham',
            'Laoo' => 'Lao',
            'Latn' => 'Latin',
            'Lepc' => 'Lepcha',
            'Limb' => 'Limbu',
            'Linb' => 'Linear B',
            'Lisu' => 'Lisu',
            'Lyci' => 'Lycian',
            'Lydi' => 'Lydian',
            'Mand' => 'Mandaic',
            'Merc' => 'Meroitic Cursive',
            'Mero' => 'Meroitic Hieroglyphs',
            'Mlym' => 'Malayalam',
            'Mong' => 'Mongolian',
            'Mtei' => 'Meetei Mayek',
            'Mymr' => 'Myanmar',
            'Nkoo' => 'Nko',
            'Ogam' => 'Ogham',
            'Olck' => 'Ol Chiki',
            'Orkh' => 'Old Turkic',
            'Orya' => 'Oriya',
            'Osma' => 'Osmanya',
            'Phag' => 'Phags Pa',
            'Phli' => 'Inscriptional Pahlavi',
            'Phnx' => 'Phoenician',
            'Plrd' => 'Miao',
            'Prti' => 'Inscriptional Parthian',
            'Rjng' => 'Rejang',
            'Runr' => 'Runic',
            'Samr' => 'Samaritan',
            'Sarb' => 'Old South Arabian',
            'Saur' => 'Saurashtra',
            'Shaw' => 'Shavian',
            'Shrd' => 'Sharada',
            'Sinh' => 'Sinhala',
            'Sora' => 'Sora Sompeng',
            'Sund' => 'Sundanese',
            'Sylo' => 'Syloti Nagri',
            'Syrc' => 'Syriac',
            'Tagb' => 'Tagbanwa',
            'Takr' => 'Takri',
            'Tale' => 'Tai Le',
            'Talu' => 'New Tai Lue',
            'Taml' => 'Tamil',
            'Tavt' => 'Tai Viet',
            'Telu' => 'Telugu',
            'Tfng' => 'Tifinagh',
            'Tglg' => 'Tagalog',
            'Thaa' => 'Thaana',
            'Thai' => 'Thai',
            'Tibt' => 'Tibetan',
            'Ugar' => 'Ugaritic',
            'Vaii' => 'Vai',
            'Xpeo' => 'Old Persian',
            'Xsux' => 'Cuneiform',
            'Yiii' => 'Yi',
            'Zinh' => 'Inherited',
            'Zyyy' => 'Common',
            'Zzzz' => 'Unknown',
        ),

        'SB' => array(
            'AT' => 'ATerm',
            'CL' => 'Close',
            'CR' => 'CR',
            'EX' => 'Extend',
            'FO' => 'Format',
            'LE' => 'OLetter',
            'LF' => 'LF',
            'LO' => 'Lower',
            'NU' => 'Numeric',
            'SC' => 'SContinue',
            'SE' => 'Sep',
            'SP' => 'Sp',
            'ST' => 'STerm',
            'UP' => 'Upper',
            'XX' => 'Other',
        ),

        'WB' => array(
            'CR' => 'CR',
            'EX' => 'ExtendNumLet',
            'Extend' => 'Extend',
            'FO' => 'Format',
            'KA' => 'Katakana',
            'LE' => 'ALetter',
            'LF' => 'LF',
            'MB' => 'MidNumLet',
            'ML' => 'MidLetter',
            'MN' => 'MidNum',
            'NL' => 'Newline',
            'NU' => 'Numeric',
            'XX' => 'Other',
        ),

    );

    protected static $inst;

    protected function __construct() {}

    public static function get() {
        if (! self::$inst) {
            self::$inst = new self;
        }
        return self::$inst;
    }

    /**
     * get the list of all categories
     */
    public function getAllCategories() {
        return $this->categories;
    }

    /**
     * get all defined category fields
     */
    public function getCategoryKeys() {
        return array_keys($this->categories);
    }

    /**
     * get all category keys, that represent boolean values
     */
    public function getBooleanCategories() {
        return $this->boolean;
    }

    /**
     * get the full name for a category
     */
    public function getCategory($cat) {
        if (array_key_exists($cat, $this->categories) &&
            $this->categories[$cat]) {
            return $this->categories[$cat];
        }
        return $cat;
    }

    /**
     * get the full text label for an abbreviated key
     *
     * The key is qualified by the category (e.g., 'sc')
     */
    public function getLabel($cat, $abbr) {
        if (array_key_exists($cat, $this->legend)) {
            if (array_key_exists($abbr, $this->legend[$cat])) {
                return $this->legend[$cat][$abbr];
            }
        }
        return $abbr;
    }

    /**
     * get all labels for a certain category
     */
    public function getLegendForCategory($cat) {
        if (array_key_exists($cat, $this->legend)) {
            return $this->legend[$cat];
        }
        return array();
    }

}


//__END__
